/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gladoctorGui;
import gladoctor.*;
import java.util.Map;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
/**
 *
 * @author ste
 */
public class MedicalRecordPanel extends javax.swing.JPanel{

    private static final long serialVersionUID = 797682400156051588L;

//TODO: come gestire il salvataggio delle modifiche ai campi?

    /**
        * Creates new form SchedaPaziente
        */
    public MedicalRecordPanel(){
            initComponents();
    }

    /**
        * This method is called from within the constructor to initialize the form.
        * WARNING: Do NOT modify this code. The content of this method is always
        * regenerated by the Form Editor.
        */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        patName = new javax.swing.JTextField();
        fisCode = new javax.swing.JTextField();
        address = new javax.swing.JTextField();
        patSurname = new javax.swing.JTextField();
        bYear = new javax.swing.JTextField();
        modifyMR = new javax.swing.JButton();
        deleteMR = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        tel = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        job = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        placeBorn = new javax.swing.JTextField();
        bDay = new javax.swing.JTextField();
        bMonth = new javax.swing.JTextField();
        backToMain = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel14 = new javax.swing.JLabel();
        cityLiving = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        exemptCode = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        areaCode = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        permDisAdd = new javax.swing.JButton();
        permDisRm = new javax.swing.JButton();
        permTrAdd = new javax.swing.JButton();
        permTrRm = new javax.swing.JButton();
        errLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        openEx = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        cronDis = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        examList = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        permTreat = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        invPerc = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        newEx = new javax.swing.JButton();
        cronDisList = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        permTreatList = new javax.swing.JComboBox();
        remEx = new javax.swing.JButton();
        chgInv = new javax.swing.JButton();

        modifyMR.setText("Modifica");
        modifyMR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                modFields(evt);
            }
        });

        deleteMR.setText("Elimina cartella");
        deleteMR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteMR(evt);
            }
        });

        jLabel9.setText("Nome:");

        jLabel10.setText("Cognome:");

        jLabel11.setText("Indirizzo:");

        jLabel12.setText("Data di nascita:");

        jLabel13.setText("Codice fiscale:");

        jLabel15.setText("Luogo di nascita:");

        jLabel2.setText("N. tel:");

        jLabel3.setText("Occupazione:");

        backToMain.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        backToMain.setText("<- Indietro");
        backToMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backToMainMouseClicked(evt);
            }
        });

        jSeparator6.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel14.setText("Citta' di residenza:");

        jLabel16.setText("Cod. esenzione:");

        jLabel17.setText("CAP:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(modifyMR)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(backToMain)
                        .addGap(382, 382, 382)
                        .addComponent(deleteMR, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(96, 96, 96))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel16)
                                        .addGap(32, 32, 32)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(patName, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
                                    .addComponent(exemptCode)))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel10)
                                    .addGap(70, 70, 70)
                                    .addComponent(patSurname, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel13)
                                        .addComponent(jLabel12))
                                    .addGap(38, 38, 38)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(bDay, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(bMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(bYear, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(fisCode))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addGap(27, 27, 27)
                                .addComponent(placeBorn, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addGap(16, 16, 16)
                                .addComponent(cityLiving, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(areaCode, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(47, 47, 47)
                                    .addComponent(job, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel11)
                                        .addComponent(jLabel2))
                                    .addGap(82, 82, 82)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(address, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
                                        .addComponent(tel)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(patName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patSurname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(fisCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(bYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(placeBorn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(cityLiving, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(areaCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(job, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exemptCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(backToMain)
                        .addComponent(deleteMR))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(modifyMR)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Anagrafica", jPanel1);

        jPanel2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                updateInv(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel4.setText("Patologie croniche:");

        jLabel5.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel5.setText("Medicinali permanenti:");

        permDisAdd.setText("+");
        permDisAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addChronic(evt);
            }
        });

        permDisRm.setText("-");
        permDisRm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rmChronic(evt);
            }
        });

        permTrAdd.setText("+");
        permTrAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addPerm(evt);
            }
        });

        permTrRm.setText("-");
        permTrRm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rmPerm(evt);
            }
        });

        errLabel2.setFont(new java.awt.Font("Ubuntu", 1, 24)); // NOI18N
        errLabel2.setForeground(new java.awt.Color(255, 3, 0));
        errLabel2.setText("ERRORE");
        errLabel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 2, true));

        jLabel7.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel7.setText("Lista visite:");

        openEx.setText("Apri visita");
        openEx.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                openExam(evt);
            }
        });

        cronDis.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Cause - effetti"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        cronDis.setColumnSelectionAllowed(true);
        cronDis.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(cronDis);
        cronDis.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        cronDis.setCellSelectionEnabled(false);
        cronDis.setRowSelectionAllowed(true);

        examList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Data"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        examList.setColumnSelectionAllowed(true);
        examList.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(examList);
        examList.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        examList.getColumnModel().getColumn(0).setResizable(false);
        examList.getColumnModel().getColumn(0).setPreferredWidth(0);
        examList.setCellSelectionEnabled(false);
        examList.setRowSelectionAllowed(true);

        permTreat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Principio attivo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        permTreat.setColumnSelectionAllowed(true);
        permTreat.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(permTreat);
        permTreat.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        permTreat.setCellSelectionEnabled(false);
        permTreat.setRowSelectionAllowed(true);

        jLabel6.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel6.setText("Percentuale invalidita':");

        jButton2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jButton2.setText("<- Indietro");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backToMain(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);

        newEx.setText("Nuova visita");
        newEx.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newExam(evt);
            }
        });

        cronDisList.setModel(new javax.swing.DefaultComboBoxModel());

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel1.setText("Malattie esistenti:");

        jLabel8.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel8.setText("Medicinali esistenti:");

        permTreatList.setModel(new javax.swing.DefaultComboBoxModel());

        remEx.setText("Elimina visita");
        remEx.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rmEx(evt);
            }
        });

        chgInv.setText("Cambia");
        chgInv.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                changeInv(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jSeparator1)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel4)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(permDisRm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addComponent(jLabel1)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(cronDisList, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(permDisAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(14, 14, 14)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel5)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(53, 53, 53)))
                            .addComponent(jLabel8)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(permTrRm, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                    .addComponent(permTreatList, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(permTrAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(remEx, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(newEx, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(openEx, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(invPerc, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(chgInv)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(errLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(7, 7, 7)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel1))
                                    .addComponent(permDisRm))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cronDisList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(permDisAdd))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addGap(7, 7, 7)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(permTrRm))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(permTreatList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(permTrAdd)))
                            .addComponent(jSeparator5))
                        .addGap(0, 7, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(openEx)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(newEx)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(remEx))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(invPerc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(chgInv))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(errLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        // Listen for changes in the text

        jTabbedPane1.addTab("Principale", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 776, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    public void init(){
        doResetMR();
        disableFields();
        fisCode.setDocument (new JTextFieldLimit(16));
        bDay.setDocument (new JTextFieldLimit(2));
        bMonth.setDocument (new JTextFieldLimit(2));
        bYear.setDocument (new JTextFieldLimit(4));
        invPerc.setDocument (new JTextFieldLimit(3));
        jTabbedPane1.setSelectedIndex(0);   //TODO: funziona?
        //errLabel1.setVisible(false);
        errLabel2.setVisible(false);
                modifyMR.setText("Modifica");                                   //Cambia testo pulsante
                modifyMR.setFont(new java.awt.Font("Ubuntu", 0, 15));           //e stile
                modifyMR.removeMouseListener(modifyMR.getMouseListeners()[0]);  //Cambia evento associato
                modifyMR.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                modFields(evt);
                }
                });
                modifyMR.repaint();
                modifyMR.revalidate();
        loadAnaFields();
        loadCronicPatList();    //pulisce e ricarica la lista malattie del paziente
        loadCronDisList();      //ricarica la lista generica di malattie
        loadPermTreatList();    //pulisce e carica la lista dei trattamenti generici
        loadPermList();         //pulise e ricarica la lista dei trattamenti del paziente
        loadVisitList();        //pulisce carica la lista visite del paziente
    }
    
    private void loadAnaFields(){
        patName.setText(MainPanel.medrec.getDataSheet().getName());
        patSurname.setText(MainPanel.medrec.getDataSheet().getSurname());
        fisCode.setText(MainPanel.medrec.getDataSheet().getFiscalCode());
        String temp[] = MainPanel.medrec.getDataSheet().getDateBorn().split("-");
        
        bDay.setText(temp[2]);
        bMonth.setText(temp[1]);
        bYear.setText(temp[0]);
        address.setText(MainPanel.medrec.getDataSheet().getAddress());
        placeBorn.setText(MainPanel.medrec.getDataSheet().getPlaceBorn());
        tel.setText(MainPanel.medrec.getDataSheet().getTelephoneNumber());
        areaCode.setText(MainPanel.medrec.getDataSheet().getAreaCode());
        exemptCode.setText(MainPanel.medrec.getDataSheet().getExemptionCode());
        cityLiving.setText(MainPanel.medrec.getDataSheet().getCityLiving());
        job.setText(MainPanel.medrec.getDataSheet().getOccupation());
        invPerc.setText((Integer.toString(MainPanel.medrec.getMainBoard().getInvalidityPercentage())));
    }
    
    private void disableFields(){
        patName.setEditable(false);
        patSurname.setEditable(false);
        fisCode.setEditable(false);
        bDay.setEditable(false);
        bMonth.setEditable(false);
        bYear.setEditable(false);
        placeBorn.setEditable(false);
        cityLiving.setEditable(false);
        exemptCode.setEditable(false);
        address.setEditable(false);
        tel.setEditable(false);
        job.setEditable(false);
        areaCode.setEditable(false);
        //invPerc //sempre modificabile dal medico
    }
    public void doDeleteMR(){
        SystemController.currentUser.deleteMR(MainPanel.medrec);
        GuiController.showMainPanel();
    }

    public void doAddChronic(){
        Object toadd = cronDisList.getSelectedItem();
        if(MainPanel.medrec != null && (toadd != null && !toadd.equals("-1")) ){
            MainPanel.medrec.getMainBoard().addDisease(toadd.toString());
//JOptionPane.showInputDialog(null, "Malattia cronica:", "Inserimento", JOptionPane.QUESTION_MESSAGE);
           MainPanel.medrec = SystemController.currentUser.getMRById(MainPanel.medrec.getFiscalCode());
            loadCronicPatList();
    	}
    }

    public void doRmChronic(){
        String torm = (String) cronDis.getValueAt(cronDis.getSelectedRow(), 0);
        if(MainPanel.medrec != null && (torm != null && !torm.equals("-1")) ){
            MainPanel.medrec.getMainBoard().deleteDisease(torm);
            MainPanel.medrec = SystemController.currentUser.getMRById(MainPanel.medrec.getFiscalCode());
            loadCronicPatList();
        }
    }

    public void doAddPerm(){
        Object toadd = permTreatList.getSelectedItem();
        if(MainPanel.medrec != null && (toadd != null && !toadd.equals("-1")) ){
            MainPanel.medrec.getMainBoard().addMedicine(toadd.toString());
            MainPanel.medrec = SystemController.currentUser.getMRById(MainPanel.medrec.getFiscalCode());
            loadPermList();
        }
    }

    public void doRmPerm(){
        String torm = (String) permTreat.getValueAt(permTreat.getSelectedRow(), 0);
        if(MainPanel.medrec != null && (torm != null && !torm.equals("-1")) ){
            MainPanel.medrec.getMainBoard().deleteMedicine(torm);
            MainPanel.medrec = SystemController.currentUser.getMRById(MainPanel.medrec.getFiscalCode());
            loadPermList();
        }
    }

    public void doAttAdd(){
        if(MainPanel.medrec != null){
            //TODO
        }
    }
    public void doRmAtt(){
        if(MainPanel.medrec != null){
            //TODO
        }
    }
    public void doModFields(){      //Attiva campi MR e cambia testo pulsante da Modifica a Salva modifiche
        patName.setEditable(true);
        patSurname.setEditable(true);
        //fisCode.setEditable(true);    //Mai editabile!
        bDay.setEditable(true);
        bMonth.setEditable(true);
        bYear.setEditable(true);
        placeBorn.setEditable(true);
        cityLiving.setEditable(true);
        exemptCode.setEditable(true);
        address.setEditable(true);
        tel.setEditable(true);
        job.setEditable(true);
        areaCode.setEditable(true);
        modifyMR.setText("Salva modifiche");                            //Cambia testo pulsante
        modifyMR.setFont(new java.awt.Font("Ubuntu", 1, 15));           //e stile
        modifyMR.removeMouseListener(modifyMR.getMouseListeners()[0]);  //Cambia evento associato
        modifyMR.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveMRFields(evt);
            }
        });
        modifyMR.repaint();
        modifyMR.revalidate();
    }

    public void doSaveMRFields(){
        if (patName.getText().length() > 0 && patSurname.getText().length() > 0 && address.getText().length() > 0 &&
                placeBorn.getText().length() > 0 && fisCode.getText().length() == 16 && bDay.getText().length() > 0 &&
                bMonth.getText().length() > 0 && bYear.getText().length() > 0 && cityLiving.getText().length() > 0 &&
                areaCode.getText().length() == 5 && ((exemptCode.getText().length() % 3) == 0 || exemptCode.getText().equals("N")) &&
                job.getText().length() > 0 && tel.getText().length() > 0){
            //MainPanel.medrec.setFiscalCode(fisCode.getText());
            MainPanel.medrec.getDataSheet().setName(patName.getText());
            MainPanel.medrec.getDataSheet().setSurname(patSurname.getText());
            MainPanel.medrec.getDataSheet().setAddress(address.getText());
            MainPanel.medrec.getDataSheet().setAreaCode(areaCode.getText());
            MainPanel.medrec.getDataSheet().setCityLiving(cityLiving.getText());
            MainPanel.medrec.getDataSheet().setPlaceBorn(placeBorn.getText());
            MainPanel.medrec.getDataSheet().setDateBorn(bYear.getText()+"-"+bMonth.getText()+"-"+bDay.getText());
            MainPanel.medrec.getDataSheet().setOccupation(job.getText());
            MainPanel.medrec.getDataSheet().setTelephoneNumber(tel.getText());
            MainPanel.medrec.getDataSheet().setExemptionCode(exemptCode.getText());
            MainPanel.medrec.getMainBoard().setInvalidityPercentage( Integer.parseInt(invPerc.getText()) );

            if(MainPanel.medrec.getDataSheet().updateData()){
                //GuiController.taskSuccess(errLabel1);
                /* Riblocca i campi, ricarica il medrec, riblocco i campi, ricarico i campi, reimposta tasto a modifica */
                disableFields();
               
                MainPanel.medrec = SystemController.currentUser.getMRById(MainPanel.medrec.getFiscalCode());
                loadAnaFields();
                modifyMR.setText("Modifica");                                   //Cambia testo pulsante
                modifyMR.setFont(new java.awt.Font("Ubuntu", 0, 15));           //e stile
                modifyMR.removeMouseListener(modifyMR.getMouseListeners()[0]);  //Cambia evento associato
                modifyMR.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                modFields(evt);
                }
                });
                modifyMR.repaint();
                modifyMR.revalidate();
            }
    }
 }
    public void disableAdminButtons(){
        modifyMR.setVisible(false);
        deleteMR.setVisible(false);
        remEx.setVisible(false);
    }
    
    public void enableAdminButtons(){
        modifyMR.setVisible(true);
        deleteMR.setVisible(true);
        remEx.setVisible(true);
    }
    
    private void saveMRFields(java.awt.event.MouseEvent evt){
        doSaveMRFields();
    }
    
    public void doResetMR(){
        doCleanMRMain();
        doResetMRana();
    }

    private void doCleanMRMain(){
        cleanCronDis();         //pulisce la lista del paziente
        cleanTreat();           //pulisce la lista trattamenti del paziente
        cleanVisits();          //pulisce lista visite paziente
        loadPermList();         //pulisce e ricarica la lista medicine paziente
        loadVisitList();        //pulisce e ricarica la lista visite paziente
        permTreatList.removeAllItems();
        cronDisList.removeAllItems();
        invPerc.setText("");
        errLabel2.setVisible(false);
    }
    
    private void doResetMRana(){
        areaCode.setText("");
        cityLiving.setText("");
        patName.setText("");
        fisCode.setText("");
        address.setText("");
        patSurname.setText("");
        bDay.setText("");
        bMonth.setText("");
        bYear.setText("");
        placeBorn.setText("");
        job.setText("");
        tel.setText("");
        exemptCode.setText("");
        errLabel2.setVisible(false);
    }
    
     private Object makeObj(final String item)  {
            return new Object() {@Override
            public String toString() { return item; } };
        }
                    
    private void loadPermTreatList(){
        String[] temp = MainPanel.medrec.getMainBoard().listMedicines();
        for(int i=0; i<temp.length; i++){
            permTreatList.addItem(makeObj(temp[i]));
        }
        permTreatList.repaint();
    }

    private void cleanVisits(){
        DefaultTableModel lmod = (DefaultTableModel) examList.getModel();
        lmod.setRowCount(0);
        examList.setModel(lmod);
        examList.repaint();
    }
    
    private void loadVisitList(){
    	if(MainPanel.medrec != null){
	        Map<Integer,String> examinations;
	        DefaultTableModel lmod = (DefaultTableModel) examList.getModel();
	        lmod.setRowCount(0);
	        examList.setModel(lmod);
	        examList.repaint();
	        // reload della cartella clinica dal DB
                MainPanel.medrec = SystemController.currentUser.getMRById(MainPanel.medrec.getFiscalCode());
                examinations = MainPanel.medrec.getMainBoard().getExaminations();
	        if(examinations != null){
	            Integer[] keys = new Integer[examinations.size()];
	            String[] values = new String[examinations.size()];
	            keys = examinations.keySet().toArray(keys);
	            values = examinations.values().toArray(values);

	            for (int j = 0; j < examinations.size(); j++){
	                lmod.addRow(new Object[]{keys[j], values[j]});
	            }
	            examList.setModel(lmod);
	            examList.repaint();
	        }else GuiController.taskFail(errLabel2);
    	}
    }
    
    private void loadPermList(){
    	if(MainPanel.medrec != null){
	        Map<String,String> treatments;
	        DefaultTableModel permlistmodel = (DefaultTableModel) permTreat.getModel();
	        permlistmodel.setRowCount(0);
	        permTreat.setModel(permlistmodel);
	        permTreat.repaint();
	        
                //MainPanel.medrec = SystemController.currentUser.getMRById(MainPanel.medrec.getFiscalCode()); //ricarica dal database
	        treatments = MainPanel.medrec.getMainBoard().getPermanentMedicines();
	        if(treatments != null){
	            String[] keys = new String[treatments.size()];
	            String[] values = new String[treatments.size()];
	            keys = treatments.keySet().toArray(keys);
	            values = treatments.values().toArray(values);
	
	            for (int j = 0; j < treatments.size(); j++){
	                String[] data = new String[2];
	
	                data[0] = keys[j];
	                data[1] = values[j];
	                permlistmodel.addRow(data);
	            }
	            permTreat.setModel(permlistmodel);
	            permTreat.repaint();
	        }else GuiController.taskFail(errLabel2);
    	}
    }
    //------------------------------------------------------
    private void cleanCronDis(){
        DefaultTableModel listmodel = (DefaultTableModel) cronDis.getModel();
        listmodel.setRowCount(0);
        cronDis.setModel(listmodel);
        cronDis.repaint();
    }
    
    private void cleanTreat(){
        DefaultTableModel listmodel = (DefaultTableModel) permTreat.getModel();
        listmodel.setRowCount(0);
        permTreat.setModel(listmodel);
        permTreat.repaint();

    }
    
    private void loadCronDisList(){ //carica la lista generica di malattie
        String[] temp = MainPanel.medrec.getMainBoard().listDiseases(); //TODO: mettere il controllo d'errore ogni volta che si fanno chiamate del genere!!! E controllare che non ci siano valori nulli che vengono fuori dagli strati bassi del programma
        for(int i=0; i<temp.length; i++){
            cronDisList.addItem(makeObj(temp[i]));
        }
        cronDisList.repaint();
    }
    
    private void loadCronicPatList(){  //carica la lista di malattie del paziente
    	if(MainPanel.medrec != null){
	        Map<String,String> cronic;
	        DefaultTableModel listmodel = (DefaultTableModel) cronDis.getModel();
	        listmodel.setRowCount(0);
	        cronDis.setModel(listmodel);
	        cronDis.repaint();
                
                //MainPanel.medrec = SystemController.currentUser.getMRById(MainPanel.medrec.getFiscalCode()); //ricarica dal database
	        cronic = MainPanel.medrec.getMainBoard().getChronicDiseases();
	        if(cronic != null){
	            String[] keys = new String[cronic.size()];
	            String[] values = new String[cronic.size()];
	            keys = cronic.keySet().toArray(keys);
	            values = cronic.values().toArray(values);
	
	            for (int j = 0; j < cronic.size(); j++){
	                String[] data = new String[2];
	
	                data[0] = keys[j];
	                data[1] = values[j];
	                listmodel.addRow(data);
	            }
	            cronDis.setModel(listmodel);
	            cronDis.repaint();
	        }else GuiController.taskFail(errLabel2);
    	}
    }
    //-----------------------------------------------------
    private void doBackToMain(){
        doResetMR();
        MainPanel.medrec = null;
        GuiController.showMainPanel();
    }
    
    private void doOpenExam(){
        int toOpen = (Integer) examList.getValueAt(examList.getSelectedRow(), 0);
        if(toOpen != -1){
            GuiController.showOldEx(toOpen);
        }
    }
    
    private void doNewExam(){
        GuiController.showNewExam();
    }
    
    private void doChangeInv(){
        if(Integer.parseInt(invPerc.getText()) <= 100){
            MainPanel.medrec.getMainBoard().setInvalidityPercentage(Integer.parseInt(invPerc.getText()));
            MainPanel.medrec.updateData();
            loadAnaFields();
        }
    }
    
    private void doRmEx(){
        int torm = (Integer) examList.getValueAt(examList.getSelectedRow(), 0);
        if(torm != -1){
            if(MainPanel.medrec.getMainBoard().deleteExamination(torm)){
                GuiController.taskSuccess(errLabel2);
                loadVisitList();
            }else GuiController.taskFail(errLabel2);
        }
    }
    
    private void deleteMR(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteMR
        int ans = JOptionPane.showConfirmDialog(null,"Eliminare questa scheda paziente?", //parent, messaggio
                                                "Conferma", JOptionPane.YES_NO_OPTION,    //titolo, tipo di pulsanti
                                                JOptionPane.QUESTION_MESSAGE);            //Tipo di icona
        if(ans == JOptionPane.YES_OPTION) {
            doDeleteMR();
        }
    }//GEN-LAST:event_deleteMR

    private void addChronic(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addChronic
        doAddChronic();
    }//GEN-LAST:event_addChronic

    private void rmChronic(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rmChronic
       doRmChronic();
    }//GEN-LAST:event_rmChronic

    private void addPerm(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addPerm
        doAddPerm();
    }//GEN-LAST:event_addPerm

    private void rmPerm(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rmPerm
        doRmPerm();
    }//GEN-LAST:event_rmPerm

    private void modFields(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_modFields
        doModFields();
    }//GEN-LAST:event_modFields

    private void backToMain(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backToMain
        doBackToMain();
    }//GEN-LAST:event_backToMain

    private void backToMainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backToMainMouseClicked
        doBackToMain();
    }//GEN-LAST:event_backToMainMouseClicked

    private void openExam(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openExam
        doOpenExam();
    }//GEN-LAST:event_openExam

    private void newExam(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newExam
        doNewExam();
    }//GEN-LAST:event_newExam

    private void changeInv(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changeInv
        doChangeInv();
    }//GEN-LAST:event_changeInv

    private void updateInv(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_updateInv

    }//GEN-LAST:event_updateInv

    private void rmEx(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rmEx
        doRmEx();
    }//GEN-LAST:event_rmEx

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField address;
    private javax.swing.JTextField areaCode;
    private javax.swing.JTextField bDay;
    private javax.swing.JTextField bMonth;
    private javax.swing.JTextField bYear;
    private javax.swing.JButton backToMain;
    private javax.swing.JButton chgInv;
    private javax.swing.JTextField cityLiving;
    private javax.swing.JTable cronDis;
    private javax.swing.JComboBox cronDisList;
    private javax.swing.JButton deleteMR;
    private javax.swing.JLabel errLabel2;
    private javax.swing.JTable examList;
    private javax.swing.JTextField exemptCode;
    private javax.swing.JTextField fisCode;
    private javax.swing.JTextField invPerc;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField job;
    private javax.swing.JButton modifyMR;
    private javax.swing.JButton newEx;
    private javax.swing.JButton openEx;
    private javax.swing.JTextField patName;
    private javax.swing.JTextField patSurname;
    private javax.swing.JButton permDisAdd;
    private javax.swing.JButton permDisRm;
    private javax.swing.JButton permTrAdd;
    private javax.swing.JButton permTrRm;
    private javax.swing.JTable permTreat;
    private javax.swing.JComboBox permTreatList;
    private javax.swing.JTextField placeBorn;
    private javax.swing.JButton remEx;
    private javax.swing.JTextField tel;
    // End of variables declaration//GEN-END:variables
}
